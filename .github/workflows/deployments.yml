name: GCP Deployment
on:
  pull_request:
    types:
      - closed
    branches:
      - main

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  gcp-deployments:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      PKR_PROJECT_ID: ${{ vars.PKR_PROJECT_ID }}
      PKR_SOURCE_IMG_FAM: ${{ vars.PKR_SOURCE_IMG_FAM }}
      PKR_SSH_USERNAME: ${{ vars.PKR_SSH_USERNAME }}
      PKR_ZONE: ${{ vars.PKR_ZONE }}
      PKR_DISK_SIZE: ${{ vars.PKR_DISK_SIZE }}
      PKR_DISK_TYPE: ${{ vars.PKR_DISK_TYPE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure GCP
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.DEV_GCP_SERVICE_IAM }}"
      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v2"
      - name: Setup Packer
        uses: hashicorp/setup-packer@main
      - name: Zip repository
        run: |
          zip -r webapp.zip .
          mv webapp.zip packer-setup/builds
      - name: Run `packer init`
        run: |
          cd packer-setup/builds
          packer init build.pkr.hcl
      - name: Build packer Image
        id: get_img_id
        run: |
          cd packer-setup/builds
          PKR_IMAGE_ID=$(packer build -machine-readable build.pkr.hcl | awk -F, '$0 ~/artifact,0,id/ {print $6}')
          echo "::set-output name=image_id::$PKR_IMAGE_ID"
      - name: Template creation for GCP-MIG
        run: |
          gcloud compute instance-templates create ${{ vars.INSTANCE_TEMP_NAME }} \
          --machine-type=${{ vars.MACHINE_TYPE }} \
          --boot-disk-size=${{ vars.BOOT_DISK_SIZE }} \
          --boot-disk-type=${{ vars.BOOT_DISK_TYPE }} \
          --image=${{ steps.get_img_id.outputs.image_id }} \
          --tags=${{ vars.TEMPLATE_TAGS }} \
          --network-interface=network=https://www.googleapis.com/compute/v1/projects/${{ vars.PROJECT_ID }}/global/networks/${{ vars.VPC_NAME }},subnet=https://www.googleapis.com/compute/v1/projects/${{ vars.PROJECT_ID }}/regions/${{ vars.REGION }}/subnetworks/${{ vars.WEBAPP_SUBNET }},network-tier=${{ vars.TEMP_NTWK_TIER }} \
          --service-account=${{ vars.TEMP_SERVICE_ACC }} \
          --scopes=logging-write,monitoring-write,pubsub,cloud-platform \
          --boot-disk-kms-key=${{ vars.KMS_KEY }} \
          --boot-disk-kms-keyring=${{ vars.KMS_KEYRING }} \
          --boot-disk-kms-location=${{ vars.REGION }} \
          --metadata=startup-script="#/bin/bash
          cd /opt/webapp/
          if [ -e .env ]; then
            sudo rm .env
          fi
          sudo tee -a .env <<EOF >/dev/null
          DB_NAME=${{ vars.DB_NAME }}
          DB_PWD=${{ secrets.DB_PWD }}
          DB_USER=${{ vars.DB_USER }}
          DB_HOST=${{ vars.TMP_DB_HOST }}
          WEB_PORT=${{ vars.WEB_PORT }}
          DB_PORT=${{ vars.DB_PORT }}
          NODE_ENV=PRODUCTION
          EMAIL_EXPIRY=${{ vars.TMP_EMAIL_EXP }}
          EOF
          sudo chown csye6225:csye6225 .env
          " \
          --instance-template-region=${{ vars.REGION }}
      - name: Attach new template version to MIG
        run: |
          gcloud compute instance-groups managed set-instance-template \
          ${{ vars.MIG_NAME }} \
          --template=projects/${{ vars.PROJECT_ID }}/regions/${{ vars.REGION }}/instanceTemplates/${{ vars.INSTANCE_TEMP_NAME }} \
          --region=${{ vars.REGION }}
      - name: Rolling action update instances
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ vars.MIG_NAME }} \
          --version=template=projects/${{ vars.PROJECT_ID }}/regions/${{ vars.REGION }}/instanceTemplates/${{ vars.INSTANCE_TEMP_NAME }} \
          --region=${{ vars.REGION }} --replacement-method=substitute --max-surge=1
      - name: Wait until instance groups are stable
        run: |
          gcloud compute instance-groups managed wait-until --stable ${{ vars.MIG_NAME }} --region=${{ vars.REGION }} --timeout=${{ vars.TIME_OUT }}
